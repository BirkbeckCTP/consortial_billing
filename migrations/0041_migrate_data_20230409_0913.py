# Generated by Django 3.2.18 on 2023-04-09 08:13

from django.db import migrations
from django.utils import timezone


def migrate_data(apps, schema_editor):

    Institution = apps.get_model('consortial_billing', 'Institution')
    SupportLevel = apps.get_model('consortial_billing', 'SupportLevel')
    SupporterSize = apps.get_model('consortial_billing', 'SupporterSize')
    Currency = apps.get_model('consortial_billing', 'Currency')
    Banding = apps.get_model('consortial_billing', 'Banding')
    Account = apps.get_model('core', 'Account')

    # Institution.supporter_level -> Institution.bands.level
    # Institution.banding.name -> Institution.bands.level
    def determine_level(supporter):
        level_name = ''
        if 'Higher' in supporter.supporter_level.name:
            level_name += 'Higher'
        for metal in ['Gold', 'Silver', 'Bronze']:
            if metal in supporter.banding.name:
                level_name += f' ({metal})'
        level, created = SupportLevel.objects.get_or_create(
            name=level_name,
        )
        return level

    # Institution.banding.name -> Institution.bands.size_temp
    # Institution.banding.size -> Institution.bands.size_temp
    def determine_size(supporter):

        if supporter.consortial_billing:
            type_descriptor = 'Consortium'
        else:
            type_descriptor = 'Institution'

        size_descriptor = supporter.size.capitalize()
        name = f'{size_descriptor} ({type_descriptor})'

        if '0-5' in supporter.banding.name:
            description = '0-4,999 FTE'
        elif '000-9' in supporter.banding.name:
            description = '5,000-9,999 FTE'
        elif '10' in supporter.banding.name:
            description = '10,000+ FTE'
        else:
            description = ''

        size_temp = SupporterSize.objects.get_or_create(
            name=name,
            description=description,
        )
        return size_temp

    # Country setup
    COUNTRIES_NORMALIZED = {
        'Australia': 'AU',
        'Austria': 'AT',
        'Belgium': 'BE',
        'Canada': 'CA',
        'Denmark': 'DK',
        'ESPAÃ‘A': 'ES',
        'Finland': 'FI',
        'France': 'FR',
        'Germany': 'DE',
        'Greece': 'GR',
        'Hong Kong': 'HK',
        'Hungary': 'HU',
        'Ireland': 'IE',
        'Israel': 'IL',
        'New Zealand': 'NZ',
        'Norway': 'NO',
        'Portugal': 'PT',
        'Schweiz': 'CH',
        'Singapore': 'SG',
        'Spain': 'ES',
        'Sweden': 'SE',
        'Switzerland': 'CH',
        'The Netherlands': 'NL',
        'The United Kingdom': 'GB',
        'The United States of America': 'US',
        'United States of America': 'US',
        'USA': 'US',
    }

    # Institution.country -> Institution.bands.country
    def determine_country(supporter):
        country = COUNTRIES_NORMALIZED[supporter.country]
        return country

    # Currency setup
    # Move all currencies to GBP, USD, and EUR
    OLD_NEW_CURRENCIES = {
        'AUD': 'USD',
        'CAD': 'USD',
        'CZK': 'EUR',
        'EUR': 'EUR',
        'GBP': 'GBP',
        'HKD': 'USD',
        'ILS': 'USD',
        'NOK': 'EUR',
        'NZD': 'USD',
        'SGD': 'USD',
        'USD': 'USD',
    }

    # Need to match each new currency to a region code
    # for auto exchange rates to work
    CURRENCIES_REGIONS = {
        'EUR': 'EMU',
        'GBP': 'GBR',
        'USD': 'USA',
    }

    # Institution.banding.currency -> Institution.bands.currency_temp
    def determine_currency(supporter):

        code = OLD_NEW_CURRENCIES[supporter.banding.currency]
        region = CURRENCIES_REGIONS[code]
        currency_temp = Currency.objects.get_or_create(
            code=code,
            region=region,
        )
        return currency_temp

    # Fee setup
    # Exchange rates are World Bank averages from 2021
    USD_EX = {
        'AUD': 1.33122425957081,
        'CAD': 1.2538769021268,
        'CZK': 21.6781666666667,
        'EUR': 0.84549413889045,
        'GBP': 0.727064944688322,
        'HKD': 7.77325,
        'ILS': 3.23019832251082,
        'NOK': 8.59,
        'NZD': 1.4138,
        'SGD': 1.34348333333333,
        'USD': 1,
    }

    # Institution.banding.fee -> Institution.bands.fee
    def determine_fee(supporter):
        old_currency = supporter.banding.currency
        new_currency = determine_currency(supporter).code
        exchange_rate = USD_EX[new_currency] / USD_EX[old_currency]
        fee = supporter.banding.default_price * exchange_rate
        return fee

    # Institution.banding -> Institution.bands
    def determine_band(supporter):
        level = determine_level(supporter)
        size = determine_size(supporter)
        country = determine_country(supporter)
        currency = determine_currency(supporter)
        fee = determine_fee(supporter)
        year = timezone.now().year
        billing_agent = supporter.billing_agent
        display = supporter.banding.display

        band, created = Banding.objects.get_or_create(
            level=level,
            size=size,
            country=country,
            currency=currency,
            fee=fee,
            datetime__year=year,
            billing_agent=billing_agent,
            display=display,
        )
        return band

    # Institution.email_address -> Institution.contacts.email
    # Institution.first_name -> Institution.contacts.first_name
    # Institution.last_name -> Institution.contacts.last_name
    def determine_contact(supporter):
        account, created = Account.objects.get_or_create(
            email=supporter.email_address,
        )
        if created:
            account.username = supporter.email_address
            account.first_name = supporter.first_name
            account.last_name = supporter.last_name
            account.save()
        return account

    for supporter in Institution.objects.all():
        band = determine_banding(supporter)
        supporter.bands.add(band)
        contact = determine_contact(supporter)
        supporter.contacts.add(contact)
        supporter.save()


class Migration(migrations.Migration):

    dependencies = [
        ('consortial_billing', '0040_revise_data_model_20230407_1640'),
    ]

    operations = [

        # MIGRATE DATA
        migrations.RunPython(
            migrate_data,
            reverse_code=migrations.RunPython.noop
        ),

    ]
